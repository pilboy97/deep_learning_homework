package mat

import (
	"reflect"
	"testing"
)

func TestMultiplyHigherDimMatrices(t *testing.T) {
	matA := &Mat{
		shape: []int{2, 3, 4, 5},
		data: []float64{
			1, 2, 3, 4, 5,
			6, 7, 8, 9, 10,
			11, 12, 13, 14, 15,
			16, 17, 18, 19, 20,
			21, 22, 23, 24, 25,
			26, 27, 28, 29, 30,
			31, 32, 33, 34, 35,
			36, 37, 38, 39, 40,
			41, 42, 43, 44, 45,
			46, 47, 48, 49, 50,
			51, 52, 53, 54, 55,
			56, 57, 58, 59, 60,
			61, 62, 63, 64, 65,
			66, 67, 68, 69, 70,
			71, 72, 73, 74, 75,
			76, 77, 78, 79, 80,
			81, 82, 83, 84, 85,
			86, 87, 88, 89, 90,
			91, 92, 93, 94, 95,
			96, 97, 98, 99, 100,
			101, 102, 103, 104, 105,
			106, 107, 108, 109, 110,
			111, 112, 113, 114, 115,
			116, 117, 118, 119, 120,
		},
	}

	matB := &Mat{
		shape: []int{2, 3, 5, 6},
		data: []float64{
			1, 2, 3, 4, 5, 6,
			7, 8, 9, 10, 11, 12,
			13, 14, 15, 16, 17, 18,
			19, 20, 21, 22, 23, 24,
			25, 26, 27, 28, 29, 30,
			31, 32, 33, 34, 35, 36,
			37, 38, 39, 40, 41, 42,
			43, 44, 45, 46, 47, 48,
			49, 50, 51, 52, 53, 54,
			55, 56, 57, 58, 59, 60,
			61, 62, 63, 64, 65, 66,
			67, 68, 69, 70, 71, 72,
			73, 74, 75, 76, 77, 78,
			79, 80, 81, 82, 83, 84,
			85, 86, 87, 88, 89, 90,
			91, 92, 93, 94, 95, 96,
			97, 98, 99, 100, 101, 102,
			103, 104, 105, 106, 107, 108,
			109, 110, 111, 112, 113, 114,
			115, 116, 117, 118, 119, 120,
			121, 122, 123, 124, 125, 126,
			127, 128, 129, 130, 131, 132,
			133, 134, 135, 136, 137, 138,
			139, 140, 141, 142, 143, 144,
			145, 146, 147, 148, 149, 150,
			151, 152, 153, 154, 155, 156,
			157, 158, 159, 160, 161, 162,
			163, 164, 165, 166, 167, 168,
			169, 170, 171, 172, 173, 174,
			175, 176, 177, 178, 179, 180,
		},
	}

	expected := &Mat{
		shape: []int{2, 3, 4, 6},
		data: []float64{
			255, 270, 285, 300, 315, 330,
			580, 620, 660, 700, 740, 780,
			905, 970, 1035, 1100, 1165, 1230,
			1230, 1320, 1410, 1500, 1590, 1680,

			5005, 5120, 5235, 5350, 5465, 5580,
			6080, 6220, 6360, 6500, 6640, 6780,
			7155, 7320, 7485, 7650, 7815, 7980,
			8230, 8420, 8610, 8800, 8990, 9180,

			15755, 15970, 16185, 16400, 16615, 16830,
			17580, 17820, 18060, 18300, 18540, 18780,
			19405, 19670, 19935, 20200, 20465, 20730,
			21230, 21520, 21810, 22100, 22390, 22680,

			32505, 32820, 33135, 33450, 33765, 34080,
			35080, 35420, 35760, 36100, 36440, 36780,
			37655, 38020, 38385, 38750, 39115, 39480,
			40230, 40620, 41010, 41400, 41790, 42180,

			55255, 55670, 56085, 56500, 56915, 57330,
			58580, 59020, 59460, 59900, 60340, 60780,
			61905, 62370, 62835, 63300, 63765, 64230,
			65230, 65720, 66210, 66700, 67190, 67680,

			84005, 84520, 85035, 85550, 86065, 86580,
			88080, 88620, 89160, 89700, 90240, 90780,
			92155, 92720, 93285, 93850, 94415, 94980,
			96230, 96820, 97410, 98000, 98590, 99180,
		},
	}

	result := matA.Mul(matB)

	if !reflect.DeepEqual(result.shape, expected.shape) {
		t.Errorf("Result shape mismatch, got: %v, want: %v", result.shape, expected.shape)
	}
	if !reflect.DeepEqual(result.data, expected.data) {
		t.Errorf("Result data mismatch, got: %v, want: %v", result.data, expected.data)
	}
}
